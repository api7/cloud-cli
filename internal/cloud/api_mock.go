// Copyright 2022 API7.ai, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package cloud is a generated GoMock package.
package cloud

import (
	reflect "reflect"

	types "github.com/api7/cloud-cli/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DebugShowConfig mocks base method.
func (m *MockAPI) DebugShowConfig(cpID, resource, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugShowConfig", cpID, resource, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugShowConfig indicates an expected call of DebugShowConfig.
func (mr *MockAPIMockRecorder) DebugShowConfig(cpID, resource, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugShowConfig", reflect.TypeOf((*MockAPI)(nil).DebugShowConfig), cpID, resource, id)
}

// GetCloudLuaModule mocks base method.
func (m *MockAPI) GetCloudLuaModule() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudLuaModule")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudLuaModule indicates an expected call of GetCloudLuaModule.
func (mr *MockAPIMockRecorder) GetCloudLuaModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudLuaModule", reflect.TypeOf((*MockAPI)(nil).GetCloudLuaModule))
}

// GetDefaultControlPlane mocks base method.
func (m *MockAPI) GetDefaultControlPlane() (*types.ControlPlane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultControlPlane")
	ret0, _ := ret[0].(*types.ControlPlane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultControlPlane indicates an expected call of GetDefaultControlPlane.
func (mr *MockAPIMockRecorder) GetDefaultControlPlane() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultControlPlane", reflect.TypeOf((*MockAPI)(nil).GetDefaultControlPlane))
}

// GetStartupConfig mocks base method.
func (m *MockAPI) GetStartupConfig(cpID string, configType StartupConfigType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartupConfig", cpID, configType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartupConfig indicates an expected call of GetStartupConfig.
func (mr *MockAPIMockRecorder) GetStartupConfig(cpID, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartupConfig", reflect.TypeOf((*MockAPI)(nil).GetStartupConfig), cpID, configType)
}

// GetTLSBundle mocks base method.
func (m *MockAPI) GetTLSBundle(cpID string) (*types.TLSBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSBundle", cpID)
	ret0, _ := ret[0].(*types.TLSBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSBundle indicates an expected call of GetTLSBundle.
func (mr *MockAPIMockRecorder) GetTLSBundle(cpID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSBundle", reflect.TypeOf((*MockAPI)(nil).GetTLSBundle), cpID)
}

// ListControlPlanes mocks base method.
func (m *MockAPI) ListControlPlanes(orgID string) ([]*types.ControlPlaneSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlPlanes", orgID)
	ret0, _ := ret[0].([]*types.ControlPlaneSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlPlanes indicates an expected call of ListControlPlanes.
func (mr *MockAPIMockRecorder) ListControlPlanes(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPlanes", reflect.TypeOf((*MockAPI)(nil).ListControlPlanes), orgID)
}

// Me mocks base method.
func (m *MockAPI) Me() (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Me")
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me.
func (mr *MockAPIMockRecorder) Me() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Me", reflect.TypeOf((*MockAPI)(nil).Me))
}
