// Copyright 2022 API7.ai, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package cloud is a generated GoMock package.
package cloud

import (
	reflect "reflect"

	cloud_go_sdk "github.com/api7/cloud-go-sdk"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DebugShowConfig mocks base method.
func (m *MockAPI) DebugShowConfig(clusterID cloud_go_sdk.ID, resource, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugShowConfig", clusterID, resource, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugShowConfig indicates an expected call of DebugShowConfig.
func (mr *MockAPIMockRecorder) DebugShowConfig(clusterID, resource, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugShowConfig", reflect.TypeOf((*MockAPI)(nil).DebugShowConfig), clusterID, resource, id)
}

// GetCloudLuaModule mocks base method.
func (m *MockAPI) GetCloudLuaModule() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudLuaModule")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudLuaModule indicates an expected call of GetCloudLuaModule.
func (mr *MockAPIMockRecorder) GetCloudLuaModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudLuaModule", reflect.TypeOf((*MockAPI)(nil).GetCloudLuaModule))
}

// GetDefaultCluster mocks base method.
func (m *MockAPI) GetDefaultCluster() (*cloud_go_sdk.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCluster")
	ret0, _ := ret[0].(*cloud_go_sdk.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCluster indicates an expected call of GetDefaultCluster.
func (mr *MockAPIMockRecorder) GetDefaultCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCluster", reflect.TypeOf((*MockAPI)(nil).GetDefaultCluster))
}

// GetDefaultOrganization mocks base method.
func (m *MockAPI) GetDefaultOrganization() (*cloud_go_sdk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOrganization")
	ret0, _ := ret[0].(*cloud_go_sdk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOrganization indicates an expected call of GetDefaultOrganization.
func (mr *MockAPIMockRecorder) GetDefaultOrganization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOrganization", reflect.TypeOf((*MockAPI)(nil).GetDefaultOrganization))
}

// GetStartupConfig mocks base method.
func (m *MockAPI) GetStartupConfig(clusterID cloud_go_sdk.ID, configType StartupConfigType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartupConfig", clusterID, configType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartupConfig indicates an expected call of GetStartupConfig.
func (mr *MockAPIMockRecorder) GetStartupConfig(clusterID, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartupConfig", reflect.TypeOf((*MockAPI)(nil).GetStartupConfig), clusterID, configType)
}

// GetTLSBundle mocks base method.
func (m *MockAPI) GetTLSBundle(clusterID cloud_go_sdk.ID) (*cloud_go_sdk.TLSBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSBundle", clusterID)
	ret0, _ := ret[0].(*cloud_go_sdk.TLSBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSBundle indicates an expected call of GetTLSBundle.
func (mr *MockAPIMockRecorder) GetTLSBundle(cpID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSBundle", reflect.TypeOf((*MockAPI)(nil).GetTLSBundle), cpID)
}

// ListClusters mocks base method.
func (m *MockAPI) ListClusters(orgID cloud_go_sdk.ID) ([]*cloud_go_sdk.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", orgID)
	ret0, _ := ret[0].([]*cloud_go_sdk.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockAPIMockRecorder) ListClusters(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockAPI)(nil).ListClusters), orgID)
}

// Me mocks base method.
func (m *MockAPI) Me() (*cloud_go_sdk.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Me")
	ret0, _ := ret[0].(*cloud_go_sdk.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me.
func (mr *MockAPIMockRecorder) Me() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Me", reflect.TypeOf((*MockAPI)(nil).Me))
}
